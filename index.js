// –û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
// —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
function normSN(sn) {
  if (isNaN(Number(sn))) return sn
  else return Number(sn)
}

// —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ XLSX
function oprosXLSX(puNumber, workbook) {
  result = [];
  // –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –õ–∏—Å—Ç–∞ ‚Ññ1
  const worksheet = workbook.Sheets[workbook.SheetNames[0]];
  const ws_arr_keyColumn = Object.keys(worksheet).filter(key => key[0] === "B");  // –∫–ª—é—á–µ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü "B"
  let cell = null;
  let value = null;
  let xlsx_row = null;
  // –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –õ–∏—Å—Ç–∞ ‚Ññ2
  const worksheet2 = workbook.Sheets[workbook.SheetNames[1]];
  const ws_arr_keyColumn2 = Object.keys(worksheet2).filter(key => key[0] === "B");  // –∫–ª—é—á–µ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü "B"
  let cell2 = null;
  let value2 = null;
  let xlsx_row2 = null;
  // –Ω–æ–º–µ—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–∞ –ª–∏—Å—Ç–∞—Ö Excel –Ω–∞—á–∏–Ω–∞—è —Å 0
  const cNum = {odate: 6, ptype: 0, svnum: 2, login: 3, route: 4, uspdn: 5, uspdr: 2};
  let uspdNumber = null;
  for (let cell_index of ws_arr_keyColumn) {
    cell = cell_index;
    value = worksheet[cell] ? worksheet[cell].v : "";
    if (normSN(value) === normSN(puNumber)) {
      xlsx_row = XLSX.utils.decode_cell(cell).r;
      result.push({
        sn: value,
        odate: worksheet[XLSX.utils.encode_cell({ c: cNum.odate, r: xlsx_row})] ? worksheet[XLSX.utils.encode_cell({ c: cNum.odate, r: xlsx_row})].v : ' ',
        ptype: worksheet[XLSX.utils.encode_cell({ c: cNum.ptype, r: xlsx_row})] ? worksheet[XLSX.utils.encode_cell({ c: cNum.ptype, r: xlsx_row})].v : "",
        svnum: worksheet[XLSX.utils.encode_cell({ c: cNum.svnum, r: xlsx_row})] ? worksheet[XLSX.utils.encode_cell({ c: cNum.svnum, r: xlsx_row})].v : "",
        login: worksheet[XLSX.utils.encode_cell({ c: cNum.login, r: xlsx_row})] ? worksheet[XLSX.utils.encode_cell({ c: cNum.login, r: xlsx_row})].v : "",
        route: worksheet[XLSX.utils.encode_cell({ c: cNum.route, r: xlsx_row})] ? worksheet[XLSX.utils.encode_cell({ c: cNum.route, r: xlsx_row})].v : "",
        uspdn: worksheet[XLSX.utils.encode_cell({ c: cNum.uspdn, r: xlsx_row})] ? worksheet[XLSX.utils.encode_cell({ c: cNum.uspdn, r: xlsx_row})].v : "",
      });
      if (result[result.length-1].uspdn) {
        uspdNumber = result[result.length-1].uspdn.split(' ', 1)[0];
        for (let cell_index2 of ws_arr_keyColumn2) {     
          cell2 = cell_index2;
          value2 = worksheet2[cell2] ? worksheet2[cell2].v : "";
          if (normSN(value2) === normSN(uspdNumber)) {
            xlsx_row2 = XLSX.utils.decode_cell(cell2).r;
            result[result.length-1].uspdr = worksheet2[XLSX.utils.encode_cell({ c: cNum.uspdr, r: xlsx_row2})] ? worksheet2[XLSX.utils.encode_cell({ c: cNum.uspdr, r: xlsx_row2})].v : ""
          }
        }
      }
    }
  }
  return result  //–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
}

// —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
let getInfoBySN = async (ctx) => {
  // –æ—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–µ–π
  ctx.react("üëç");
  // —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
  try {
    await bot.api.sendMessage(admin, `${ctx.message.text} –∑–∞–ø—Ä–æ—Å –æ—Ç @${ctx.message.from.username} ${ctx.message.from.id} ${ctx.message.from.first_name}`);
  } catch (error) {
    console.error(error);
  }
  let textOrMatch = null;
  if (ctx.match) {textOrMatch = ctx.match} else {textOrMatch = ctx.message.text}
  try {    
    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –≥—Ä—É–ø–ø–µ
    let access = (await bot.api.getChatMember(accessgroup, ctx.message.from.id)).status;
    if (access === 'creator' || access === 'administrator' || access === 'member') {
      let mesResult = oprosXLSX(textOrMatch, workbook);
      let uspdr_try = "";
      if (mesResult.length == 0) {
        await ctx.reply(`${textOrMatch} == –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      }
      else {
        for (let mesResult_i of mesResult) { // in
          if (mesResult_i) {
            uspdr_try = mesResult_i.uspdr ? mesResult_i.uspdr : "";
            if (mesResult_i.odate === ' ') {
              await ctx.reply(`${mesResult_i.sn} == –Ω–µ –æ–ø—Ä–æ—Å
 == ${mesResult_i.ptype} == ${mesResult_i.svnum} == ${mesResult_i.login} == ${mesResult_i.route} == ${mesResult_i.uspdn} == ${uspdr_try}`)
            }
            else {
              await ctx.reply(`${mesResult_i.sn} == –æ–ø—Ä–æ—Å ${mesResult_i.odate}
 == ${mesResult_i.ptype} == ${mesResult_i.svnum} == ${mesResult_i.login} == ${mesResult_i.route} == ${mesResult_i.uspdn} == ${uspdr_try}`)
            }
          }
          else await ctx.reply(`${textOrMatch} == –Ω–µ –Ω–∞–π–¥–µ–Ω`)
        }
      }
    } else {
      await ctx.reply(`–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ ${(await bot.api.getChat(accessgroup)).title}`)
    }
  } catch (error) {
    console.error(error)
  }
}

//======—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å=========//
require('dotenv').config();
const {Bot, Api} = require('grammy');
const XLSX = require('xlsx');
const {EventEmitter} = require('events');
  EventEmitter.defaultMaxListeners = 20;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç
const bot = new Bot(process.env.BOT_API_KEY);
const accessgroup = process.env.ACCESS_GROUP_ID;
const admin = process.env.ADMIN_ID;
const xlsxRoute = process.env.XLSX_ROUTE;

// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ xlsx
let startTime = Date.now();
let workbook = XLSX.readFile(xlsxRoute);
let endTime = Date.now();

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.command('start', async (ctx) => {
  // —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –∑–∞–ø—Ä–æ—Å–µ
  try {
    await bot.api.sendMessage(admin, `${ctx.message.text} –∑–∞–ø—Ä–æ—Å –æ—Ç @${ctx.message.from.username} ${ctx.message.from.id} ${ctx.message.from.first_name}`);
  } catch (error) {
    console.error(error);
  }
  await ctx.reply('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∫–æ–ª–ª–µ–≥–∏! –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –ü–£ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç—ã –æ–ø—Ä–æ—Å–∞')
})

bot.command('sn', getInfoBySN)

bot.command('reloadxlsx', async (ctx) => {
  // —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –∑–∞–ø—Ä–æ—Å–µ
  try {
    await bot.api.sendMessage(admin, `${ctx.message.text} –∑–∞–ø—Ä–æ—Å –æ—Ç @${ctx.message.from.username} ${ctx.message.from.id} ${ctx.message.from.first_name}`);
  } catch (error) {
    console.error(error);
  }
  if (ctx.message.from.id.toString() === admin.toString()) {
    let startTime = Date.now(); // –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    let workbook = XLSX.readFile(xlsxRoute);
    let endTime = Date.now(); // –∫–æ–Ω–µ—Ü –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    await ctx.reply(`–§–∞–π–ª .xlsx –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞ ${endTime-startTime}–º—Å`); // –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º—Å
  } else {
    await ctx.reply('–í—ã –Ω–µ –∞–¥–º–∏–Ω');
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  console.error(`–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: ${err.error.message}`)
})

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
// –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–∫—É
bot.chatType("private").on('message', getInfoBySN);

bot.start();